배열
- 한 번 생성하면 길이를 변경할 수 없다. (고정길이 데이터 구조)
- 더 많은 저장공간이 필요하다면 더 큰 길이의 배열을 새로 만들고 이전 배열의 항목들을 복사
- 배열 복사
- ENUM (열거 타입)
- Calendar 클래스
-------------------------------------------------------------------------------------------------------------
클래스
- 객체 지향 프로그래밍
- 객체 와 클래스
- 클래스 선언
- 객체를 생성하는 방법과 클래스 변수란?
- 클래스의 구성 멤버
- 필드 선언 과 사용
- 생성자 선언 과 호출 (생성자 오버로딩)
- 메소드 선언 호출
- 패키지
- 접근제한자 (public > protected > default > private)
- Setter() , Getter() ( 반드시 public 이어야 한다 )
-------------------------------------------------------------------------------------------------------------
필드(클래스에 정의된 멤버변수) 와 메소드 선언 방법에 따라서 인스턴스 멤버와 정적 멤버 분류하여 선언한다.
- 인스턴스 멤버 : 객체 생성(new) 후 사용할 수 있다. (객체에 소속된 멤버)
- 정적 멤버 : 객체 생성 없이 사용할 수 있다. (클래스에 고정되어있는 멤버 : static)
- final 필드 와 상수
- 싱글톤 패턴
- 빌더 패턴
-------------------------------------------------------------------------------------------------------------
싱글톤(singleton) 패턴(pattern) 이란? 어플리케이션 전체에서 단 한 객체만 생성해서 사용한다.
핵심은 생성자를 private 접근 제한 해서 외부에서 new 연산자로 생성자로 호출할 수 없도록 막는 방법.
private 클래스() {} -> new 생성자 X

- 생성자를 호출할 수가 없으니 외부에서 마음대로 객체를 생성이 불가능하다. 대신 싱글톤 패턴이 제공하는
  정적 메소드를 통해서 간접적으로 객체를 얻을 수 있게 한다. Calendar.getInstance()

  패턴
  public class 클래스{
        private static 클래스 singleton = new 클래스();
        // private 접근 권한을 갖는 정적필드(singleton) 선언 및 초기화

        private 클래스(){}; // private 접근 권한을 갖는 생성자 선언 : 외부 객체 생성 불가

        public static 클래스 getInstance(){ // 외부에서 해당 객체를 얻는 유일한 방법은 getInstance() 메소드 호출
            // 정적필드(singleton) 값을 리턴하는 getInstance() 정적 메소드를
            // public 선언하여 외부에서 해당 객체를 간접적으로 얻을 수 있도록 만듦
            return singleton;
        }
}
디자인 패턴 중에서 가장 개념이 간단한 패턴

- 왜 싱글톤 패턴을 쓸까?
ㄴ> 메모리 절약을 위해, 인스턴스가 필요할 때 똑같은 인스턴스를 새로 만들지 말고, 기존의인스턴스를 가져와서 활용하는 기법

- 어떨때 적용하면 좋을까?
ㄴ> 그 객체가 리소스를 많이 차지하는 역할, 무거운 클래스를 설계할 때 적용
(데이터베이스 연결 모듈, 디스크 연결, 네트워크 통신, DBCP 컨네션 풀, 스레드 풀, 캐시, 로그 기록 객체 운영)

싱글톤 패턴 구현 기법 종류
어떤 목적을 구현하기 위한 코드 : 가장 최적화된 패턴을 상황에 맞게 사용하는 것이 핵심
싱글톤 패턴을 구현할 때 대표적인 코드 기법 7가지
1. Eager Initialization
    한번만 미리 만들어두는, 가장 직관적이면서도 심플한 기법 (Keep)
2. Static block Initialization
    클래스가 로딩되고 클래스 변수가 준비된 후 자동으로 실행되는 블럭
        static { // static 블럭을 이용해 예외 처리
            try {
                instance = new SingletonStatic();
            } catch (Exception e) {
                throw new RuntimeException("싱글톤 객체 생성 오류");
            }
        }
        public static SingletonStatic getInstance() {
            return instance;
        }
    }
3. Lazy Initialization
    객체 생성에 대한 관리를 내부적으로 처리, 메서드를 호출했을 때
    인스턴스 변수의 null 유무에 따라 초기화 하거나 있는걸 반환하는 기법
    Thread Safe 하지 않은 단점이 있다.
        public static SingletonStatic getInstance() {
            // 외부에서 정적메소드인 getInstance() 호출하면 이때 초기화를 진행 (Lazy)
            if (instance == null) instance = new SingletonStatic();
            return instance;
        }
4. Thread safe Initialization
    여러 개의 스레드가 동시에 접근해도 안전하게 객체를 초기화하는 방법
5. Double-Checked Locking (volatile)
    멀티스레드 환경에서 Singleton 객체를 생성할 때, 성능을 최적화하면서도
    동기화를 보장하기 위해 두 번 조건을 검사하는 방식
6. Bill Pugh Solution (Lazy Holder)
    멀티스레드 환경에서 안전하고 Lazy Loading (나중에 객체 생성)
    클래스 안에 내부 클래스(holder)를 만들어서 JVM 클래스 로더 매커니즘과 클래스가 로드되는 시점에 이용하는 방법
    public class SingletonHolder {
        private SingletonHolder(){};
        private static class SingletonInstanceHolder{
            private static final SingletonHolder INSTANCE = new SingletonHolder();
        }
        public static SingletonHolder getInstance() {
            return SingletonInstanceHolder.INSTANCE;
        }
    }
7. Enum 이용
    enum SingletonEnum {
        INSTANCE;

        private final Client dbClient;

        SingletonEnum(){
            dbClient = Database.getClient();
        }

        public static SingletonEnum getInstance(){
            return INSTANCE;
        }
        public Client getClient(){
            return dbClient;
        }
    }

    public static void main(String[] args) {
        SingletonEnum singletonEnum = SingletonEnum.getInstance();
        SingletonEnum.getClient();
    }

싱글톤의 문제점
1. 모듈간의 의존성이 높아진다.
2. S.O.L.I.D 원칙 : 객체 지향 프로그래밍이 지향하는 원칙
3. TDD (테스트 주도 개발)
-------------------------------------------------------------------------------------------------------------
Quiz 1. 클래스를 사용하는 시점에서 딱 한번 메모리에 로딩하기 위해서 사용하는 키워드는 무엇인가
-> static

Quiz 2. 다음은 JVM 에서 사용하는 메모리 중 어떤 메모리를 설명하고 있는지 쓰세요.
    1. 메서드가 호출되면 호출된 기계어 코드가 push 되고 실행되는 메모리공간
    2. 현재 프로그램이 실행되고 있는 상태를 파악할 수 있다.
    3. LIFO 구조이다.
-> 스택 메모리

Quiz 3. 객체 생성을 막으려면 어떻게 하면 되는가?
-> private 로 생성자를 선언

Quiz 4. 객체 생성에 의해 메모리(Heap Memory)에 만들어진 객체를 무엇이라고 하는가.
-> 인스턴스

Quiz 5. JVM이 사용하는 메모리 4가지 모델을 쓰세요.
-> 메소드, 힙, 스택, 리터럴 풀

-------------------------------------------------------------------------------------------------------------

- 객체 지향 프로그래밍
  - 프로그램을 **객체(실제 사물처럼 다루는 것)** 단위로 만들고 관리하는 방식.

- 객체 와 클래스
  - **객체**는 실제 사용하는 데이터, **클래스**는 객체를 만드는 설계도.

- 클래스 선언
  - `class 클래스명 { 필드; 생성자; 메서드; }` 형태로 만들어 사용.

- 객체를 생성하는 방법과 클래스 변수란?
  - `new 클래스명();` 으로 객체를 만들고, `static` 키워드를 사용하면 모든 객체가 공유하는 변수(클래스 변수)가 됨.

- 클래스의 구성 멤버
  - **변수(필드), 생성자, 메서드** 등이 클래스 안에 포함됨.

- 필드 선언 과 사용
  - 객체의 속성을 저장하는 변수로, 클래스 안에서 선언하고 사용.

- 생성자 선언 과 호출 (생성자 오버로딩)
  - 객체가 생성될 때 자동으로 실행되는 특별한 메서드, 여러 개 만들 수 있음(오버로딩).

- 메소드 선언 호출
  - 객체가 하는 행동(기능)을 정의하는 코드, `객체명.메서드명();` 형태로 실행.

- 패키지
  - 관련된 클래스를 폴더처럼 묶어서 관리하는 기능 (`package 패키지명;`).

- 접근제한자 (public > protected > default > private)
  - 클래스나 변수, 메서드가 어디에서 사용될 수 있는지 정하는 키워드.
    - **public**: 어디서든 사용 가능
    - **protected**: 같은 패키지 또는 상속받은 클래스에서 사용 가능
    - **default**(아무 것도 안 씀): 같은 패키지에서만 사용 가능
    - **private**: 클래스 내부에서만 사용 가능

- Setter() , Getter() ( 반드시 public 이어야 한다 )
  - 클래스 내부의 변수를 **안전하게 변경(set)하고 읽기(get) 위한 메서드**, 보통 `public`으로 설정.

-------------------------------------------------------------------------------------------------------------

- 인스턴스 멤버
  - 객체를 만들 때마다 새로 생성되는 변수와 메서드 (`static`이 없는 멤버).

- 정적 멤버
  - `static`이 붙은 변수와 메서드는 모든 객체가 공유하여 사용.

- final 필드 와 상수
  - `final`이 붙으면 한 번만 값을 설정할 수 있으며, `static final`은 변하지 않는 상수.

- 싱글톤 패턴
  - **프로그램에서 딱 하나의 객체만 만들도록 하는 패턴** (`private 생성자 + static getInstance()`).

- 빌더 패턴
  - **객체를 쉽게 만들도록 도와주는 방법**으로, 생성자의 매개변수가 많을 때 사용.
